{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["returnFileSize","number","toFixed","App","props","reduceImage","e","setState","originalImgSize","total","imageSrc","target","result","img","Image","src","onload","canvas","document","createElement","ctx","getContext","drawImage","width","height","dataurl","toDataURL","console","log","smallerImgSrc","reducedImgSize","Math","round","length","handleImageUpload","a","file","files","reader","FileReader","readAsDataURL","state","className","type","accept","onChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAGA,SAASA,EAAeC,GACtB,OAAIA,EAAS,KACJA,EAAS,QACPA,GAAU,MAAQA,EAAS,SAC5BA,EAAS,MAAMC,QAAQ,GAAK,KAC3BD,GAAU,SACXA,EAAS,SAASC,QAAQ,GAAK,UADlC,E,IAwFMC,E,YAjFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,gBAAiBR,EAAeM,EAAEG,OAClCC,SAAUJ,EAAEK,OAAOC,SAGrB,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAMT,EAAEK,OAAOC,OACnBC,EAAIG,OAAS,WACX,IAAMC,EAASC,SAASC,cAAc,UAEhCC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAUT,EAAK,EAAG,GAEtB,IAEIU,EAAQV,EAAIU,MACZC,EAASX,EAAIW,OAEbD,EAAQC,EACND,EANY,MAOdC,GAPc,IAOQD,EACtBA,EARc,KAWZC,EAVa,MAWfD,GAXe,IAWOC,EACtBA,EAZe,KAenBP,EAAOM,MAAQA,EACfN,EAAOO,OAASA,EAChBJ,EAAIE,UAAUT,EAAK,EAAG,EAAGU,EAAOC,GAEhC,IAAMC,EAAUR,EAAOS,UAAU,WACjCC,QAAQC,IAAIH,GAEZ,EAAKlB,SAAS,CACZsB,cAAeJ,EAGfK,eAAgB9B,EAAe+B,KAAKC,MAAyD,GAAlDP,EAAQQ,OAAS,yBAAyBA,QAAU,QAnDlF,EAyDnBC,kBAzDmB,uCAyDC,WAAO5B,GAAP,iBAAA6B,EAAA,sDACZC,EAAO9B,EAAEK,OAAO0B,MAAM,IACtBC,EAAS,IAAIC,YACZvB,OAAS,EAAKX,YACrBiC,EAAOE,cAAcJ,GAJH,2CAzDD,sDAEjB,EAAKK,MAAQ,CACXjC,gBAAiB,GACjBsB,eAAgB,GAChBpB,SAAU,GACVmB,cAAe,IANA,E,sEAiEjB,OACE,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,2BAAOC,KAAK,OAAOC,OAAO,yBAAyBC,SAAUC,KAAKZ,oBAClE,6CAAmBY,KAAKL,MAAMjC,iBAC9B,gDAAsBsC,KAAKL,MAAMX,gBACjC,yBAAKY,UAAU,mBACb,yBAAK3B,IAAK+B,KAAKL,MAAM/B,WACrB,yBAAKK,IAAK+B,KAAKL,MAAMZ,uB,GA3EfkB,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASsC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a967fe8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction returnFileSize(number) {\n  if (number < 1024) {\n    return number + 'bytes';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + 'KB';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + 'MB';\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      originalImgSize: '',\n      reducedImgSize: '',\n      imageSrc: '',\n      smallerImgSrc: ''\n    };\n  }\n\n  reduceImage = (e) => {\n    this.setState({\n      originalImgSize: returnFileSize(e.total),\n      imageSrc: e.target.result\n    });\n\n    const img = new Image();\n    img.src = e.target.result;\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n\n      const MAX_WIDTH = 800;\n      const MAX_HEIGHT = 600;\n      let width = img.width;\n      let height = img.height;\n\n      if (width > height) {\n        if (width > MAX_WIDTH) {\n          height *= MAX_WIDTH / width;\n          width = MAX_WIDTH;\n        }\n      } else {\n        if (height > MAX_HEIGHT) {\n          width *= MAX_HEIGHT / height;\n          height = MAX_HEIGHT;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      ctx.drawImage(img, 0, 0, width, height);\n\n      const dataurl = canvas.toDataURL(\"image/*\");\n      console.log(dataurl);\n\n      this.setState({\n        smallerImgSrc: dataurl,\n\n        // https://stackoverflow.com/a/18557601/1050479\n        reducedImgSize: returnFileSize(Math.round((dataurl.length - 'data:image/png;base64,'.length)*3/4))\n      })\n    };\n\n  };\n\n  handleImageUpload = async (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = this.reduceImage;\n    reader.readAsDataURL(file)\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input type=\"file\" accept=\"image/*;capture=camera\" onChange={this.handleImageUpload}/>\n          <p>Original size: {this.state.originalImgSize}</p>\n          <p>New reduced size: {this.state.reducedImgSize}</p>\n          <div className=\"Image-container\">\n            <img src={this.state.imageSrc} />\n            <img src={this.state.smallerImgSrc} />\n          </div>\n        </header>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}